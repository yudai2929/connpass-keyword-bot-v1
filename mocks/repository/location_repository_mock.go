// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/location_repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/yudai2929/connpass-keyword-bot-v1/pkg/domain/entity"
	valueobject "github.com/yudai2929/connpass-keyword-bot-v1/pkg/domain/valueobject"
	gomock "go.uber.org/mock/gomock"
)

// MockLocationRepository is a mock of LocationRepository interface.
type MockLocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLocationRepositoryMockRecorder
}

// MockLocationRepositoryMockRecorder is the mock recorder for MockLocationRepository.
type MockLocationRepositoryMockRecorder struct {
	mock *MockLocationRepository
}

// NewMockLocationRepository creates a new mock instance.
func NewMockLocationRepository(ctrl *gomock.Controller) *MockLocationRepository {
	mock := &MockLocationRepository{ctrl: ctrl}
	mock.recorder = &MockLocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepository) EXPECT() *MockLocationRepositoryMockRecorder {
	return m.recorder
}

// SearchByCoordinate mocks base method.
func (m *MockLocationRepository) SearchByCoordinate(coordinate valueobject.Coordinate) (entity.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByCoordinate", coordinate)
	ret0, _ := ret[0].(entity.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByCoordinate indicates an expected call of SearchByCoordinate.
func (mr *MockLocationRepositoryMockRecorder) SearchByCoordinate(coordinate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByCoordinate", reflect.TypeOf((*MockLocationRepository)(nil).SearchByCoordinate), coordinate)
}
