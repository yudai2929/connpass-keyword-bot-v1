// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/event_repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/yudai2929/connpass-keyword-bot-v1/pkg/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// GetByKeyword mocks base method.
func (m *MockEventRepository) GetByKeyword(keywords []string) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeyword", keywords)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeyword indicates an expected call of GetByKeyword.
func (mr *MockEventRepositoryMockRecorder) GetByKeyword(keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeyword", reflect.TypeOf((*MockEventRepository)(nil).GetByKeyword), keywords)
}
