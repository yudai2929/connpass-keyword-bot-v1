// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/notified_event_repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotifiedEventRepository is a mock of NotifiedEventRepository interface.
type MockNotifiedEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotifiedEventRepositoryMockRecorder
}

// MockNotifiedEventRepositoryMockRecorder is the mock recorder for MockNotifiedEventRepository.
type MockNotifiedEventRepositoryMockRecorder struct {
	mock *MockNotifiedEventRepository
}

// NewMockNotifiedEventRepository creates a new mock instance.
func NewMockNotifiedEventRepository(ctrl *gomock.Controller) *MockNotifiedEventRepository {
	mock := &MockNotifiedEventRepository{ctrl: ctrl}
	mock.recorder = &MockNotifiedEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifiedEventRepository) EXPECT() *MockNotifiedEventRepositoryMockRecorder {
	return m.recorder
}

// FindByEventIDs mocks base method.
func (m *MockNotifiedEventRepository) FindByEventIDs(eventIDs []int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEventIDs", eventIDs)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEventIDs indicates an expected call of FindByEventIDs.
func (mr *MockNotifiedEventRepositoryMockRecorder) FindByEventIDs(eventIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEventIDs", reflect.TypeOf((*MockNotifiedEventRepository)(nil).FindByEventIDs), eventIDs)
}

// Save mocks base method.
func (m *MockNotifiedEventRepository) Save(eventIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", eventIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockNotifiedEventRepositoryMockRecorder) Save(eventIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNotifiedEventRepository)(nil).Save), eventIDs)
}
